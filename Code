 
@GetMapping("/preview")
public String documentPreview(HttpServletRequest httpRequest, Model model) {
  String queryStringParams = httpRequest.getQueryString();
  String queryString = StringUtils.substringAfter(queryStringParams, "url=");

  if (StringUtils.isBlank(queryString)) {
    log.error("Missed 'url' query param");
    return "preview";
  }

  try {
    DownloadFileResponse downloadFileResponse = storageService.load(queryString);
    model.addAttribute("image", new String(Base64.getEncoder().encode(IOUtils.toByteArray(downloadFileResponse.getContent()))));
  } catch (Exception e) {
    log.error("Failed to download file " + queryString, e);
    model.addAttribute("errorMessage", e.getMessage());
    model.addAttribute("errorStackTrace", ExceptionUtils.getStackTrace(e));
  }

  return "preview";
}


@PostMapping("/upload")
public String documentUpload(@RequestParam("file") MultipartFile file) {
  UploadFileResponse uploadFileResponse = storageService.store(file);
  return "redirect:/documents/preview?url=" + uploadFileResponse.getFileUrl();
}


@Override
public UploadFileResponse store(MultipartFile file) {
  try (ByteArrayInputStream inputStream = new ByteArrayInputStream(file.getBytes())) {
    String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
    PutObjectResult putObjectResult = amazonS3.putObject(new PutObjectRequest(bucketName, fileName, inputStream, null));
    log.info("File {} successfully uploaded {}", fileName, putObjectResult.toString());
    return UploadFileResponse.builder().fileUrl(preSignedImageUrl(bucketName, fileName)).build();
  } catch (AmazonServiceException ase) {
    log.error("Caught an AmazonServiceException, which means your request made it to Amazon S3, but was rejected with an error response for some reason.", ase);
  } catch (AmazonClientException ace) {
    log.error("Caught an AmazonClientException, which means the client encountered an internal error while trying to communicate with S3, such as not being able to access the network.", ace);
  } catch (IOException e) {
    log.error("Can't upload file to S3", e);
  }
  return UploadFileResponse.builder().build();
}


@Override
public DownloadFileResponse load(String url) throws IOException {
  CloseableHttpClient client = HttpClients.createDefault();
  HttpGet httpGet = new HttpGet(url);
  InputStream is = client.execute(httpGet).getEntity().getContent();
  return DownloadFileResponse.builder().fileName(UUID.randomUUID().toString()).content(is).build();
}
